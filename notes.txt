todo:

try to write a test to reproduce issues w/ editor example in a background tab

keep changes in a ring buffer instead of an array that grows without bounds

change ultrawave contructor to take an options object instead of just port - let
it configure bufferSize, max room members, etc.. think about ways to make server
extensible.

better handling of errors in joinOrCreate promise (need to throw specific
errors, catch only those errors).. right now when there is an error in the
cursor callback, it gets caught and silenced making tracking down difficult



browser requirements:
Promise, Symbol, Map, Set, WebSocket, RTCPeerConnection


Data is represented as a 'document' - a tree structure contianing either arrays
or hashes.  Changes are represented as a 'path' to the node to be modified, a
method, and arguemnts.  Methods on hashes are 'set', 'delete', and 'merge', and
methods on arrays are 'set', 'delete', and 'splice'.  Changes are sent between
peers as json: ["change", [clock, method, ...arguments]]

Because messages can be received out of order, can be repeated, or can be lost,
vector clocks are used to create an ordering and ensure that operations are
idempotent so that the document will be eventually consistant across peers.

There are 3 distinct modules here - Cursor handles modeling a deep tree of
immutable data, PeerGroup handles peering and messaging over webrtc datachannels
(including a GroupServer component), and Ultrawave handles syncing changes to
a document between peers


When a peer connects to the server
- the server responds with 'start' and an id for the peer


When a peer shares a document
- the peer sends a 'create' message to server with a requested room name
- if the name is in use, server responds with 'create failed' and the room
- otherwise the server creates the room, responds with 'created'


When a peer requests an existing document
- the peer sends a 'join' message to the server with the room name
- if the room does not exist, server responds with 'join failed' and the room
- otherwise, server sends 'request offer' messages to exiting peers in the room
- the server sends a 'joined' message to the requesting peer
- the existing peers create offers, send 'offer' messages to the server w/ sdps
- the server forwards the 'offer' messages to the connecting peer
- the connecting peer creates answers and sends 'answer' messages to the server
  along with sds
- the server forwards the 'answer' messages to the existing peers
- the connecting and existing peers receive ice candidates, send 'candidate'
  messages to the server along with their candidates
- the server forwards the candidate messages to peers allowing connections to be
  formed
- the connecting peer sends a 'request document' message to the first existing
  peer it forms a connection to
- the peer responds with a 'document' message the current document and clock
- the peer sends 'request changes' with the document clock to each other peer,
  requesting any changes they have made after the clock
- the existing peers respond send any changes they have made after the clock,
  and begin sending new changes the connecting peer


When a peer makes a change to the document
- the peer increments its vector clock
- the peer makes the change locally, and adds it along w/ the updated clock to a
  list of recent changes
- the peer sends the path, updated value, and updated clock to each other peer


When a peer recieves a message indicating a change to the document
- the peer compares the incoming clock to its clock
- if the incoming clock is later, the peer applies the change, appends it to its
  list of recent changes, and updates its clock
- if the incoming clock is earlier, the peer looks in its list of changes until
  it finds the immediately preceding change.
- the peer rewinds state to the immediately preceding change, then applies all
  remaining changes in order.
- conflicts are resolved in favor of the author with lowest id
- if the incoming clock indicates a missed message from one peer, the peer sets
  a timeout after which it will send a 'request sync' message with the missing
  author id and clock tick
- the peer invalidates any existing timeouts that the incoming message makes
  redundant


api:

Ultrawave.create room, data, (root) ->
  React.render <Component>, el

Ultrawave.join room, (root) ->
  React.render <Component>, el
